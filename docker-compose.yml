services:
  # Conteneur pour l'application React (client)
  client:
    build: ./client  
    container_name: react-app
    ports:
      - "4173:80"  
    networks:
      - fbrain_network
    environment:
      - TZ=Europe/Paris

  # Conteneur pour l'application Django (serveur)
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: .env
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn server_config.wsgi:application --bind 0.0.0.0:8000
      "
    container_name: django-server
    ports:
      - "8081:8000"  
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fbrain_network
    environment:
      - TZ=Europe/Paris

  # Conteneur pour Prometheus 
  prometheus:
    build: ./monitoring/prometheus
    container_name: prometheus
    ports:
      - "9090:9090" 
    networks:
      - fbrain_network
    environment:
      - TZ=Europe/Paris

  # Conteneur pour PostgreSQL (Base de donn√©es)
  db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: fbrain_db
      POSTGRES_USER: fbrain_user
      POSTGRES_PASSWORD: fbrain_pass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - fbrain_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "fbrain_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Conteneur pour Grafana (Monitoring)
  grafana:
    build: ./monitoring/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - fbrain_network
    environment:
      - TZ=Europe/Paris

  # Conteneur pour Nginx 
  proxy:
    build: ./proxy  
    container_name: nginx-proxy
    ports:
      - "80:80"  
      - "443:443"  
    networks:
      - fbrain_network
    environment:
      - TZ=Europe/Paris

  # Conteneur pour RabbitMQ (Message Broker)
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4-management
    ports:
      - "15672:15672"
    env_file: .env
    networks:
      - fbrain_network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Conteneur pour Celery
  celery:
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: .env
    command: celery -A server_config worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://fbrain_user:fbrain_pass@db:5432/fbrain_db
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    networks:
      - fbrain_network
    depends_on:
      - server
      - rabbitmq

networks:
  fbrain_network:
    driver: bridge

volumes:
  pgdata:
